import React from "react";
import Modal from "react-modal";
import { Field, Formik, ErrorMessage } from "formik";
import * as yup from "yup";
import {useDispatch, useSelector} from "react-redux";
import {addTask} from "../../store/Reducers/taskReducer";

export default function TaskModal({ show, onClose, project_id }) {
  const customStyles = {
    content: {
      top: '50%',
      left: '50%',
      right: 'auto',
      bottom: 'auto',
      transform: 'translate(-50%, -50%)',
      width: "80%",
      height: "30rem"
    }
  };

  const validationSchema = yup.object().shape({
    title: yup.string().required("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫"),
    file: yup.mixed().required("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª"),
    numberTask: yup
      .number()
      .typeError("–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
      .required('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏')
      .test('is-number', '–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º', (value) => {
        if (!value) return true; // Allow empty value
        return !isNaN(value);
      }),
    description: yup.string()
      .min(10, "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤")
      .max(2000, "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤")
      .required("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"),
    priority: yup.string().required('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏'),
    status: yup.string().required('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏'),
  });

  const dispatch = useDispatch();
  const iconWithStatus = (status) => {
    if (status.toLowerCase() === "queue") {
      return "‚≠ïÔ∏è";
    } else if (status.toLowerCase() === "development") {
      return "üîÜÔ∏è";
    } else if (status.toLowerCase() === "done") {
      return "‚úÖ";
    }
  }

  const getCurrentDate = () => {
    const currentDate = new Date();

    const day = currentDate.getDate();
    const month = currentDate.getMonth() + 1;
    const year = currentDate.getFullYear();

    return `${day}\\${month}\\${year}`;
  }

  const currentUser = useSelector(state => state.auth.currentUser);

  return (
    <Modal
      isOpen={show}
      onRequestClose={() => {
        onClose();
      }}
      overlayClassName={"overlay"}
      style={customStyles}
    >
      <div>
        <h1 style={{
          display: "block",
          textAlign: "center",
          marginBottom: "3rem"
        }}>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</h1>

        <Formik
          initialValues={{
            title: "",
            file: null,
            numberTask: '',
            description: '',
            priority: 'low',
            status: 'queue',
          }}
          validateOnBlur
          onSubmit={({ title, file, numberTask, description, priority, status  }) => {
            dispatch(addTask({
              projectId: Number(project_id),
              numberTask: Number(numberTask),
              title: title,
              description: description,
              dateOfCreation: getCurrentDate(),
              timeInWork: null,
              endDate: null,
              priority: priority,
              files: file,
              status: status,
              subtasks: [],
              comments: [],
              icon: iconWithStatus(status),
              author: Number(currentUser.id),
            }));
            onClose();
          }}
          validationSchema={validationSchema}
        >
          {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty, setFieldValue }) => {
            return (
              <form onSubmit={handleSubmit}>
                {/* title */}
                <div>
                  <label htmlFor="title">–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                  <Field type="text" id="title" name="title" />
                  <ErrorMessage name="title" component="div" />
                </div>

                {/* file */}
                <div>
                  <label htmlFor="file">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã:</label>
                  <input
                    type="file"
                    id="file"
                    name="file"
                    multiple  // Add the multiple attribute
                    onChange={(event) => {
                      // event.currentTarget.files is now an array of selected files
                      const selectedFiles = Array.from(event.currentTarget.files);
                      setFieldValue("file", selectedFiles);
                    }}
                  />
                  <ErrorMessage name="file" component="div" />
                </div>

                {/* numberTask */}
                <div>
                  <label htmlFor="numberTask">–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:</label>
                  <Field type="text" id="numberTask" name="numberTask" />
                  <ErrorMessage name="numberTask" component="div" />
                </div>

                {/* description */}
                <div>
                  <label htmlFor="description">–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:</label>
                  <Field type="text" id="description" name="description" />
                  <ErrorMessage name="description" component="div" />
                </div>

                {/* priority */}
                <div>
                  <label htmlFor="priority">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:</label>
                  <Field as="select" name="priority">
                    <option value="low">–ù–∏–∑–∫–∏–π</option>
                    <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                    <option value="height">–í—ã—Å–æ–∫–∏–π</option>
                  </Field>
                  <ErrorMessage name="priority" component="div" />
                </div>

                {/* status */}
                <div>
                  <label htmlFor="status">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:</label>
                  <Field as="select" name="status">
                    <option value="queue">Queue</option>
                    <option value="development">Development</option>
                    <option value="done">Done</option>
                  </Field>
                  <ErrorMessage name="status" component="div" />
                </div>

                <button
                  className={`btn ${!isValid || !dirty ? ("btn-disabled") : ("btn-success")}`}
                  disabled={!isValid || !dirty}
                  type="submit"
                >–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É</button>
              </form>
            );
          }}
        </Formik>
      </div>
    </Modal>
  );
}